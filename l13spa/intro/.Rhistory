tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[1]]
url <- 'https://stuffgate.com/stuff/website/top-1000-sites'
web<-GET(url,.encoding = "utf-8")
url <- 'http://stuffgate.com/stuff/website/top-1000-sites'
web<-GET(url,.encoding = "utf-8")
doc = htmlParse(web)
tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[1]]
data <- tables[[2]]
View(data)
rm(list=ls())
library(XML)
url <- 'http://stuffgate.com/stuff/website/top-1000-sites'
web<-read_html(url,.encoding = "utf-8")
doc = htmlParse(web)
tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[2]]
library(httr)
url <- 'http://stuffgate.com/stuff/website/top-1000-sites'
web<-GET(url,.encoding = "utf-8")
doc = htmlParse(web)
tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[2]]
library(httr)  ## 获取网页的另一张形式
web<-GET(url,.encoding = "utf-8")
doc<-content(web,as="parsed")
tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[2]]
library(httr)  ## 获取网页的另一张形式
web<-GET(url,.encoding = "utf-8")
doc<-content(web)
tables <-readHTMLTable(doc,
stringsAsFactors =FALSE,
header = T)
data <- tables[[2]]
str(doc)
require(RCurl) #调用curl
name<-"leadingsoci@163.com"
pwd<-"521chunxia_=ruc"
host=c(
"User-Agent"="Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12",
"Accept"="text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
"Accept-Language"="zh-cn,zh;q=0.5",
"Accept-Charset"="GB2312,utf-8;q=0.7,*;q=0.7",
"Keep-Alive"="115",
"Connection"="keep-alive",
"Content-Type"="application/x-www-form-urlencoded; charset=UTF-8",
"Pragma"="no-cache",
"Cache-Control"="no-cache")
cookie_file='/Users/liding/E/Bdata/rtemp/cookie.txt'
myHttpheader<- c(
"Host"= "dj.renren.com",
"User-Agent" ="Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:52.0) Gecko/20100101 Firefox/52.0",
"Accept"="text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
"Accept-Language"= "zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3",
"Accept-Charset"="GB2312,utf-8;q=0.7,*;q=0.7",
"Referer"="http://www.renren.com/SysHome.do",
"Connection"= "keep-alive"
)
d =debugGatherer()
temp<- getURL("http://www.renren.com/PLogin.do",header=host,
debugfunction=d$update,verbose= TRUE)
cat(d$value()[3])
cat(d$value()[2])
d <- debugGatherer()
cH <- getCurlHandle(followlocation=T, verbose=T,
debugfunction=d$update,
ssl.verifyhost=F, ssl.verifypeer=F,
cookiejar='./cookies', cookiefile='./cookies')
pinfo <- c(
'email'=name,
'password'=pwd
)
x <- try(ttt <- postForm('http://www.renren.com/PLogin.do', header=host,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
host=c(
"User-Agent"="Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-CN; rv:1.9.2.12) Gecko/20101026 Firefox/3.6.12",
"Accept"="text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
"Accept-Language"="zh-cn,zh;q=0.5",
"Accept-Charset"="utf-8;q=0.7,*;q=0.7",
"Keep-Alive"="115",
"Connection"="keep-alive",
"Content-Type"="application/x-www-form-urlencoded; charset=UTF-8",
"Pragma"="no-cache",
"Cache-Control"="no-cache")
# 登录
#url.exists("http://www.renren.com/PLogin.do")
x <- try(ttt <- postForm('http://www.renren.com/PLogin.do', header=host,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
cH <- getCurlHandle(followlocation=T, verbose=T,
debugfunction=d$update,
ssl.verifyhost=F, ssl.verifypeer=F,
cookiejar='./cookies') #, cookiefile=cookie_file
x <- try(ttt <- postForm('http://www.renren.com/PLogin.do', header=host,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
library(httr)
temp<- POST("http://www.renren.com/PLogin.do",header=host,
config=pinfo,verbose= TRUE)
temp<- POST("http://www.renren.com/PLogin.do",add_headers(.headers=host),
authenticate("leadingsoci@163.com","521chunxia_=ruc"),verbose= TRUE)
temp<- POST("http://www.renren.com/PLogin.do",add_headers(.headers=host),
authenticate("leadingsoci@163.com","521chunxia_=ruc",type="digest"),verbose= TRUE)
library(RCurl)
curl <- getCurlHandle()
curlSetOpt(cookiejar="cookies.txt", curl=curl)
postForm("http://www.renren.com/PLogin.do", email="leadingsoci@163.com", passwd="521chunxia_=ruc", curl=curl)
getURL("http://www.renren.com/SysHome.do", curl=curl)
x <- try(ttt <- postForm("http://www.renren.com/PLogin.do", email="leadingsoci@163.com", passwd="521chunxia_=ruc", curl=curl))
library(RCurl)
curl <- getCurlHandle()
curlSetOpt(cookiejar="cookies.txt", curl=curl)
x <- try(ttt <- postForm("http://3g.renren.com/login.do", email="leadingsoci@163.com", passwd="521chunxia_=ruc", curl=curl))
getURL("http://3g.renren.com/Home.do", curl=curl)
str(x)
hostm=c(
"Accept" ="text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
"Accept-Language"="zh-CN,zh;q=0.8,en;q=0.6",
"Cache-Control"= "max-age=0",
"Connection"="keep-alive",
"Content-Type" ="application/x-www-form-urlencoded",
"Host"="3g.renren.com",
"Origin"="http://3g.renren.com",
"Referer"="http://3g.renren.com/login.do?",
"Upgrade-Insecure-Requests"=1,
"User-Agent"="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"
)
d =debugGatherer()
temp<- getURL("http://3g.renren.com/Login.do",header=hostm,
debugfunction=d$update,verbose= TRUE)
cat(d$value()[3])
cat(d$value()[2])
d <- debugGatherer()
cH <- getCurlHandle(followlocation=T, verbose=T,
debugfunction=d$update,
ssl.verifyhost=F, ssl.verifypeer=F,
cookiejar='./cookies', cookiefile='./cookies')
pinfo <- c(
'email'=name,
'password'=pwd
)
lbskey<-"1489886897574WzGjs6cPjr5cPSvCfqdA"
pinfo <- c(
'email'=name,
'password'=pwd,
'lbskey'=lbskey
)
x <- try(ttt <- postForm('http://3g.renren.com/Login.do', header=hostm,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
x <- try(ttt <- postForm('http://3g.renren.com/Login.do?', header=hostm,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
x <- try(ttt <- postForm('http://3g.renren.com/login.do?autoLogin=true&', header=hostm,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
str(x)
cat(x,file="aaa.htlm")
getwd()
cat(x,file="aaa.html")
d =debugGatherer()
temp<- getURL("http://3g.renren.com/Login.do?",header=hostm,
debugfunction=d$update,verbose= TRUE)
cat(d$value()[3])
cat(d$value()[2])
d =debugGatherer()
temp<- getURL("http://3g.renren.com/Login.do?autoLogin=true&",header=hostm,
debugfunction=d$update,verbose= TRUE)
cat(d$value()[3])
cat(d$value()[2])
d <- debugGatherer()
cH <- getCurlHandle(followlocation=T, verbose=T,
debugfunction=d$update,
ssl.verifyhost=F, ssl.verifypeer=F,
cookiejar='./cookies', cookiefile='./cookies')
pinfo <- c(
'email'=name,
'password'=pwd,
'lbskey'=lbskey
)
d <- debugGatherer()
cH <- getCurlHandle(followlocation=T, verbose=T,
debugfunction=d$update,
ssl.verifyhost=F, ssl.verifypeer=F,
cookiejar='./cookies') #, cookiefile=cookie_file
#url.exists("http://www.renren.com/PLogin.do")
x <- try(ttt <- postForm('http://3g.renren.com/login.do?autoLogin=true&', header=hostm,
.params=pinfo,  style='post', curl=cH,
.encoding = 'utf-8'))
cat(x,file="ab.htlm")
cat(x,file="ab.html")
curl <- getCurlHandle() #虚拟一个浏览器
curlSetOpt(cookiejar=tempfile(), curl=curl) #生成cookie
getURL("http://www.renren.com/SysHome.do", curl=curl) #填充cookie
web0<-getURL("http://www.renren.com/SysHome.do", curl=curl) #填充cookie
cat(web0,file="abb.html")
the0url <- 'http://3g.renren.com/friendlist.do?&sid=qCsb7h-weIDuaqHmhIuYIs&mt40zx&htf=3'
the0get <- getURL(the0url, curl=cH, .encoding='UTF-8')
# write(the0get, 'xxx.txt')
uid <- gsub('^.*\n\'id\':\'(\\d+)\'.*$', '\\1', the0get)
cat(the0get,file="ab.html")
url.exists("http://www.renren.com/home")
library(RCurl)
library(XML)
url <-"http://bj.xiaozhu.com/fangzi/5098280314.html"
doc <- htmlTreeParse(url, useInternalNodes=T,encoding='utf-8')
#原因为htmlParse可以抓取http的页面，不能抓取https的页面
nodi<-getNodeSet(doc, "//h4")
getNodeSet(doc, "//h4/em")
# 提取内容
xmlValue(nodi[[1]])
# 提取属性
xmlValue(getNodeSet(doc, "//title")[[1]])
getNodeSet(doc, "//head")
getNodeSet(doc, "//h6")
getNodeSet(doc, "//h6")[[1]]
summary(getNodeSet(doc, "//h6"))
getNodeSet(doc, c("//h6","//h4"))
getNodeSet(doc, "//a[@class='lorder_name']")[[1]]
Encoding(getNodeSet(doc, "//h6")[[1]]) = "UTF-8"
biaoti<-getNodeSet(doc, "//h6")[[1]]
biaoti
Encoding(biaoti) = "UTF-8"
biaoti<-as.vecter(biaoti)
biaoti<-as.vector(biaoti)
biaoti<-as.vector(biaoti)
biaoti<-as.character(biaoti)
biaoti<-getNodeSet(doc, "//h6")[[1]]
biaoti
biaoti<-xmlValue(getNodeSet(doc, "//h6")[[1]])
Encoding(biaoti) = "UTF-8"
biaoti
big  <- replicate(100, factor(sample(c('AA','AB','BB', NA), 1e6, T)), simplify = F)
bigDT <- as.data.table(big)
system.time({
for(name in names(big)){
setattr(big[[name]],'levels',1:-1)
}
})
str(big)
big  <- replicate(100, factor(sample(c('AA','AB','BB', NA), 1e6, T)), simplify = F)
bigDT <- as.data.table(big)
library(data.table)
bigDT <- as.data.table(big)
View(bigDT)
system.time({
for(name in names(bigDT)){
setattr(bigDT[[name]],'levels',1:-1)
}
})
table(bigDT$V1)
system.time({
for(name in names(big)){
setattr(big[[name]],'levels',1:-1)
}
})
table(big$v1)
str(bigDT)
system.time({
for(name in names(big)){
setattr(big[[name]],'levels',1:-1)
}
})
bigDT <- as.data.table(big)
str(bigDT)
table(bigDT$V1)
libray(sna)
install.packages(sna)
install.packages("sna")
install.packages("statnet")
library(statnet)
# 首先随机生成3个由10个节点构成的有向网络
g=array(dim=c(3,10,10))
g[1,,] = rgraph(10)
g[2,,] = rgraph(10,tprob=g[1,,]*0.8) # 设置g1和g2两个网络强相关
g[3,,] = 1; g[3,1,2] = 0 # g3接近于一个派系（clique）
# 绘制这3个网络
par(mfrow=c(1,3))
for(i in 1:3) {
gplot(g[i,,],usecurv=TRUE, mode = "fruchtermanreingold",
vertex.sides=3:8)}
#计算网络的相关矩阵
gcor(g)
j = rgraph(5) # 随机生成一个网络
j  #看一下这个网络的矩阵形式
rmperm(j) #随机置换后的网络的矩阵形式
q.12 = qaptest(g, gcor, g1 = 1, g2 = 2)
q.13 = qaptest(g, gcor, g1 = 1, g2 = 3)
# 看一下QAP输出的结果
par(mfrow=c(1,2))
summary(q.12)
plot(q.12)
summary(q.13)
plot(q.13)
?bygroup
?groupby
??goupby
??bygroup
library(maptools)
quanguo<- readShapeSpatial("/Users/liding/DATA/map/Chinacountiesstata/counties_china.shp")
plot(quanguo, border = "grey60",lwd=.5)
library(RCurl)
library(RJSONIO)
construct.geocode.url <- function(address) {
root <- "http://api.map.baidu.com/geocoder/v2/?ak=0QxKBNPPD2BrnnRkNtkoG3XI&callback=renderOption&output=json&address="
u <- paste(root,address)
return(URLencode(u))
}
gGeoCode <- function(address,verbose=FALSE) {
require("plyr")
if(verbose) cat(address,"\n")
u <- aaply(address,1,construct.geocode.url)
doc <- aaply(u,1,getURL)
doc<-gsub("renderOption&&renderOption\\(", "", doc)
doc<-gsub("\\)", "", doc)
json <- alply(doc,1,fromJSON,simplify = FALSE)
coord = laply(json,function(x) {
if(x$status=="0") {
lat <- x$result$location$lat
lng <- x$result$location$lng
return(c(lat, lng))
} else {
return(c(NA,NA))
}
})
if(length(address)>1) colnames(coord)=c("lat","lng")
else names(coord)=c("lat","lng")
return(data.frame(address,coord))
}
gGeoCode(c("百度大厦&city=北京","百度大厦&city=北京"))
library(maptools)
rm(list=ls())
setwd("/Users/liding/E/Bdata/Course/7Space/")	## Mac
load("Datasets.RData")
setwd("/Users/liding/E/Bdata/Course/7Space/zhukov")	## Mac
library(maps)         ## Projections
library(maptools)     ## Data management
library(sp)           ## Data management
library(spdep)        ## Spatial autocorrelation
library(gstat)        ## Geostatistics
library(splancs)      ## Kernel Density
library(spatstat)     ## Geostatistics
library(pgirmess)     ## Spatial autocorrelation
library(RColorBrewer) ## Visualization
library(classInt)     ## Class intervals
library(spgwr)        ## GWR
setwd("/Users/liding/E/Bdata/Course/7Space/zhukov")	## Mac
load("Datasets.RData")
head(crime)
dim(crime)
data <- crime
sp_point <- cbind(data$LONG, data$LAT)
colnames(sp_point) <- c("LONG","LAT")
head(sp_point)
proj <- CRS("+proj=utm +zone=17 +datum=WGS84")
data.sp <- SpatialPointsDataFrame(coords=sp_point,data,proj4string=proj)
bbox(data.sp)
par(mar=c(2,2,0.2,0.2))
plot(data.sp,pch=16, cex=.5, axes=T)
dev.off()
summary(election)
names(election)
data <- election
summary(data)[1:4]
par(mar=c(0,0,0,0))
plot(data)
par(mar=rep(0.5,4))
plot(election,xlim=bbox(data.sp)[1,],ylim=bbox(data.sp)[2,],col="beige")
plot(data.sp,pch=1, cex=.5,add=T, col="blue")
dev.off()
par(mar=c(0,3,0,0),cex=.6)
display.brewer.all(n=5)
dev.off()
br.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
br.palette(5)
par(mar=c(0,3,0,0),cex=.6)
display.brewer.all(n=5)
dev.off()
var <- data$Bush_pct
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
data <- election
var <- data$Bush_pct
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
summary(data)[1:4]
dev.off()
par(mar=c(0,3,0,0),cex=.6)
display.br.palette(n=5)
display.brewer.all(n=5)
dev.off()
classes_fx <- classIntervals(var, n=5, style="fixed", fixedBreaks=c(0, 10, 25, 50, 75, 100), rtimes = 1)
classes_sd <- classIntervals(var, n=5, style = "sd", rtimes = 1)
classes_fi <- classIntervals(var, n=5, style = "fisher", rtimes = 3)
classes_eq <- classIntervals(var, n=5, style = "equal", rtimes = 1)
classes_km <- classIntervals(var, n=5, style = "kmeans", rtimes = 1)
classes_qt <- classIntervals(var, n=5, style = "quantile", rtimes = 1)
par(mar=c(2,2,2,1)+0.1, mfrow=c(2,3))
plot(classes_fx, pal=pal, main="Fixed Intervals", xlab="", ylab="")
pal <- br.palette(n=5)
plot(classes_fx, pal=pal, main="Fixed Intervals", xlab="", ylab="")
plot(classes_sd, pal=pal, main="Standard Deviation", xlab="", ylab="")
plot(classes_fi, pal=pal, main="Fisher-Jenks", xlab="", ylab="")
plot(classes_km, pal=pal, main="K Means", xlab="", ylab="")
plot(classes_eq, pal=pal, main="Equal Interval", xlab="", ylab="")
plot(classes_qt, pal=pal, main="Quantile", xlab="", ylab="")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
spplot(data, zcol=var, col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
br.palette(10)
plot(seq(1,5))
plot(seq(1,5),col=br.palette(n=5))
plot(seq(1,5),col=br.palette(n=5))
dev.off()
data <- election
par(mar=c(0,3,0,0),cex=.6)
display.brewer.all(n=5)
dev.off()
par(mar=c(0,3,0,0),cex=.6)
plot(seq(1,5),col=br.palette(n=5))
plot(seq(1,5),cex=2,col=br.palette(n=5))
plot(seq(1,5),cex=2,pch=0,col=br.palette(n=5))
plot(seq(1,5),cex=2,pch=2,col=br.palette(n=5))
plot(seq(1,5),cex=2,pch=21,col=br.palette(n=5))
plot(seq(1,5),cex=2,pch=10,col=br.palette(n=5))
plot(seq(1,5),cex=10,pch=10,col=br.palette(n=5))
dev.off()
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
summary(data)
proj4string(data) <- CRS("+proj=lcc+lon_0=90w +lat_1=20n +lat_2=60n")
proj4string(data) <- CRS("+proj=longlat +datum=WGS84")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
rm(list=ls())
load("Datasets.RData")
data <- crime
sp_point <- cbind(data$LONG, data$LAT)
colnames(sp_point) <- c("LONG","LAT")
head(sp_point)
proj <- CRS("+proj=utm +zone=17 +datum=WGS84")
data.sp <- SpatialPointsDataFrame(coords=sp_point,data,proj4string=proj)
bbox(data.sp)
par(mar=c(2,2,0.2,0.2))
plot(data.sp,pch=16, cex=.5, axes=T)
dev.off()
summary(election)
names(election)
data <- election
proj4string(data) <- CRS("+proj=longlat +datum=WGS84")
summary(data)[1:4]
par(mar=c(0,0,0,0))
plot(data)
dev.off()
par(mar=rep(0.5,4))
plot(election,xlim=bbox(data.sp)[1,],ylim=bbox(data.sp)[2,],col="beige")
plot(data.sp,pch=1, cex=.5,add=T, col="blue")
dev.off()
par(mar=c(0,3,0,0),cex=.6)
display.brewer.all(n=5)
dev.off()
br.palette <- colorRampPalette(c("blue", "red"), space = "rgb")
br.palette(10)
par(mar=c(0,3,0,0),cex=.6)
plot(seq(1,5),cex=10,pch=10,col=br.palette(n=5))
dev.off()
data <- election
var <- data$Bush_pct
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
proj4string(data) <- CRS("+proj=longlat +datum=WGS84")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
data <- election
sumary(data)
summary(data)
proj4string(data) <- CRS("+proj=lcc+lon_0=90w +lat_1=20n +lat_2=60n")
datanew <- spTransform(data, CRS("+proj=lcc +lat_1=33 +lat_2=45 +lat_0=39 +lon_0=-96
+x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
proj4string(data) <- CRS("+proj=longlat +datum=WGS84")
datanew <- spTransform(data, CRS("+proj=lcc +lat_1=33 +lat_2=45 +lat_0=39 +lon_0=-96
+x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
spplot(datanew, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
proj4string(data) <- CRS("+proj=lcc+lat_0=39 +lon_0=90 +lat_1=20 +lat_2=60")
proj4string(data) <- CRS("+proj = lcc + lat_1=20 +lat_2=60 + lat_0=39 +lon_0=90")
proj4string(data) <- CRS("+proj = lcc + lat_1=20n +lat_2=60n + lat_0=39 +lon_0=90n")
proj4string(data) <- CRS("+proj = lcc + lat_1=20n +lat_2=60n +lon_0=90n")
proj4string(data) <- CRS("+proj=lcc+lat_0=39 +lon_0=90w +lat_1=20n +lat_2=60n")
proj4string(data) <- CRS("+proj=lcc+lon_0=90w +lat_1=20n +lat_2=60n")
proj4string(data) <- CRS("+proj=lcc")
dev.off()
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
data <- election
var <- data$Bush_pct
proj4string(data) <- CRS("+proj=lcc")
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
dev.off()
spplot(data, zcol="Bush_pct", col.regions=br.palette(100), main="Percent of County Vote for Bush (2004)")
rm(list=ls())
?cor
a<-c(1:10)
a+1
list1<-list(c(1:10),"a","b")
list1
